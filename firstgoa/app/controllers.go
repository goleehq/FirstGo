// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "firstgoa": Application Controllers
//
// Command:
// $ goagen
// --design=github.com/phxuecan/FirstGo/firstgoa/design
// --out=$(GOPATH)/src/github.com/phxuecan/FirstGo/firstgoa
// --version=v1.2.0-dirty

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// HelloController is the controller interface for the Hello actions.
type HelloController interface {
	goa.Muxer
	Answer(*AnswerHelloContext) error
	Say(*SayHelloContext) error
}

// MountHelloController "mounts" a Hello resource controller on the given service.
func MountHelloController(service *goa.Service, ctrl HelloController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewAnswerHelloContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*Message)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Answer(rctx)
	}
	service.Mux.Handle("POST", "/firstgoa/answer", ctrl.MuxHandler("answer", h, unmarshalAnswerHelloPayload))
	service.LogInfo("mount", "ctrl", "Hello", "action", "Answer", "route", "POST /firstgoa/answer")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewSayHelloContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Say(rctx)
	}
	service.Mux.Handle("GET", "/firstgoa/say/:words", ctrl.MuxHandler("say", h, nil))
	service.LogInfo("mount", "ctrl", "Hello", "action", "Say", "route", "GET /firstgoa/say/:words")
}

// unmarshalAnswerHelloPayload unmarshals the request body into the context request data Payload field.
func unmarshalAnswerHelloPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &message{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}
