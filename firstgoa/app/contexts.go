// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "firstgoa": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/phxuecan/FirstGo/firstgoa/design
// --out=$(GOPATH)/src/github.com/phxuecan/FirstGo/firstgoa
// --version=v1.2.0-dirty

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// AnswerHelloContext provides the hello answer action context.
type AnswerHelloContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *Message
}

// NewAnswerHelloContext parses the incoming request URL and body, performs validations and creates the
// context used by the hello controller answer action.
func NewAnswerHelloContext(ctx context.Context, r *http.Request, service *goa.Service) (*AnswerHelloContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AnswerHelloContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AnswerHelloContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// SayHelloContext provides the hello say action context.
type SayHelloContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Words string
}

// NewSayHelloContext parses the incoming request URL and body, performs validations and creates the
// context used by the hello controller say action.
func NewSayHelloContext(ctx context.Context, r *http.Request, service *goa.Service) (*SayHelloContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SayHelloContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramWords := req.Params["words"]
	if len(paramWords) > 0 {
		rawWords := paramWords[0]
		rctx.Words = rawWords
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *SayHelloContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "plain/text")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}
